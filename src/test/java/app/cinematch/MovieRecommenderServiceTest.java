package app.cinematch;

import app.cinematch.api.OllamaClient;
import app.cinematch.model.Recommendation;
import app.cinematch.util.JsonStorageMock;
import java.lang.reflect.Method;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Set;
import java.util.function.BiConsumer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Tests unitaires de MovieRecommenderService.
 * Style BDD (Given / When / Then) avec commentaires explicatifs.
 */
public class MovieRecommenderServiceTest {

    /**
     * Faux client Ollama pour les tests.
     * - N'appelle jamais le r√©seau
     * - D√©file les r√©ponses simul√©es dans RESPONSES
     */
    private static final class FakeOllamaClient extends OllamaClient {
        static final Deque<String> RESPONSES = new ArrayDeque<>();

        FakeOllamaClient() {
            super("http://fake", "test-model");
        }

        @Override
        public String chat(final String system, final String user) {
            return RESPONSES.isEmpty() ? "" : RESPONSES.removeFirst();
        }

        static void reset() {
            RESPONSES.clear();
        }
    }

    // M√©thode utilitaire pour instancier le service avec injection du faux client
    private MovieRecommenderService newService() {
        final OllamaClient fake = new FakeOllamaClient();
        final BiConsumer<String, String> sink = JsonStorageMock::addOrUpdate;
        return new MovieRecommenderService(fake, sink);
    }

    // Nettoyage entre les tests
    @AfterEach
    void tearDown() {
        FakeOllamaClient.reset();
        JsonStorageMock.reset();
    }

    // -------------------------------------------------------------------------
    // GIVEN / WHEN / THEN tests avec explications d√©taill√©es
    // -------------------------------------------------------------------------

    @Test
    void givenFullJson_whenRecommendFromLike_thenBuildsRecommendationWithYearAndSuffix() {
        // GIVEN : l‚ÄôIA renvoie un JSON complet avec tous les champs.
        FakeOllamaClient.RESPONSES.add("""
        {
          "title":"Inception",
          "pitch":"Un casse onirique audacieux",
          "year":"2010",
          "platform":"Netflix"
        }
        """);
        final MovieRecommenderService service = newService();

        // WHEN : on demande une recommandation √† partir du film "Interstellar".
        final Recommendation result = service.recommendFromLike("Interstellar");

        // THEN : le service construit une recommandation compl√®te :
        // titre, pitch, ann√©e, suffixe ajout√©, plateforme.
        assertEquals("Inception", result.title());
        assertTrue(result.reason().contains("Un casse onirique audacieux"));
        assertTrue(result.reason().contains("ann√©e sugg√©r√©e : 2010"));
        assertTrue(result.reason().contains("Inspir√© de Interstellar"));
        assertEquals("Netflix", result.platform());
        assertNull(result.posterUrl());
    }

    @Test
    void givenPitchAlreadyMentionsLikedTitle_whenRecommendFromLike_thenNoSuffixIsAdded() {
        // GIVEN : le pitch contient d√©j√† le titre du film aim√©.
        FakeOllamaClient.RESPONSES.add("""
        {
          "title":"Blade Runner",
          "pitch":"Hommage appuy√© √† Interstellar dans ses th√®mes.",
          "year":"1982",
          "platform":"Club Cin√©phile"
        }
        """);
        final MovieRecommenderService service = newService();

        // WHEN : on appelle recommendFromLike("Interstellar").
        final Recommendation result = service.recommendFromLike("Interstellar");

        // THEN : le pitch d‚Äôorigine est conserv√©, sans suffixe ajout√©.
        assertTrue(result.reason().startsWith("Hommage appuy√© √† Interstellar"));
        assertTrue(result.reason().contains("ann√©e sugg√©r√©e : 1982"));
        assertEquals("Blade Runner", result.title());
        assertEquals("Club Cin√©phile", result.platform());
    }

    @Test
    void givenNoJson_whenRecommendRandom_thenUsesFallbacks() {
        // GIVEN : la r√©ponse n‚Äôest pas un JSON, juste une ligne de texte.
        FakeOllamaClient.RESPONSES.add("  - üé• The Matrix\nDu texte en plus\n");
        final MovieRecommenderService service = newService();

        // WHEN : on appelle recommendRandom().
        final Recommendation result = service.recommendRandom();

        // THEN : le titre est extrait de la premi√®re ligne lisible
        // et le reste utilise les valeurs par d√©faut.
        assertEquals("üé• The Matrix", result.title());
        assertEquals("Suggestion IA", result.reason());
        assertTrue(Set.of("Cin√©ma du Coin+", "StreamFiction", "Club Cin√©phile", "Festival Replay")
                .contains(result.platform()));
    }

    @Test
    void givenPartialJson_whenRecommendRandom_thenUsesFallbackTitleAndPlatform() {
        // GIVEN : JSON partiel avec champs vides.
        FakeOllamaClient.RESPONSES.add("""
        Intro de l'IA
        {"title":"   ","pitch":"Pitch pr√©sent","year":"  ","platform":"   "}
        Ligne finale
        """);
        final MovieRecommenderService service = newService();

        // WHEN : on appelle recommendRandom().
        final Recommendation result = service.recommendRandom();

        // THEN : le titre provient de la premi√®re ligne non vide,
        // le pitch est pris du JSON, et la plateforme est choisie al√©atoirement.
        assertEquals("Intro de l'IA", result.title());
        assertEquals("Pitch pr√©sent", result.reason());
        assertTrue(Set.of("Cin√©ma du Coin+", "StreamFiction", "Club Cin√©phile", "Festival Replay")
                .contains(result.platform()));
    }

    @Test
    void givenInvalidJsonStructure_whenRecommendRandom_thenCatchesParseError() {
        // GIVEN : JSON malform√© (branche catch du parse()).
        FakeOllamaClient.RESPONSES.add("intro { \"title\": OOPS, \"pitch\": , } fin");
        final MovieRecommenderService service = newService();

        // WHEN : on appelle recommendRandom().
        final Recommendation result = service.recommendRandom();

        // THEN : le service g√®re l‚Äôerreur et utilise les valeurs fallback.
        assertEquals("intro { \"title\": OOPS, \"pitch\": , } fin", result.title());
        assertEquals("Suggestion IA", result.reason());
        assertTrue(Set.of("Cin√©ma du Coin+", "StreamFiction", "Club Cin√©phile", "Festival Replay")
                .contains(result.platform()));
    }

    @Test
    void givenEmptyResponse_whenRecommendRandom_thenUsesDoubleFallback() {
        // GIVEN : la r√©ponse de l‚ÄôIA est vide.
        FakeOllamaClient.RESPONSES.add("");
        final MovieRecommenderService service = newService();

        // WHEN : recommendRandom() est appel√©.
        final Recommendation result = service.recommendRandom();

        // THEN : le titre devient "Suggestion myst√®re" et le pitch "Suggestion IA".
        assertEquals("Suggestion myst√®re", result.title());
        assertEquals("Suggestion IA", result.reason());
        assertTrue(Set.of("Cin√©ma du Coin+", "StreamFiction", "Club Cin√©phile", "Festival Replay")
                .contains(result.platform()));
    }

    @Test
    void givenMovieTitle_whenGenerateDescription_thenReturnsOllamaResponse() {
        // GIVEN : l‚ÄôIA renvoie une courte description.
        FakeOllamaClient.RESPONSES.add("Une description immersive.");
        final MovieRecommenderService service = newService();

        // WHEN : on appelle generateDescription().
        final String description = service.generateDescription("Parasite");

        // THEN : la m√©thode retourne exactement le texte renvoy√© par l‚ÄôIA.
        assertEquals("Une description immersive.", description);
    }

    @Test
    void givenTitleAndStatus_whenMark_thenDelegatesToJsonStorage() {
        // GIVEN : service avec un sink mock (JsonStorageMock).
        final MovieRecommenderService service = new MovieRecommenderService(
                new FakeOllamaClient(),
                app.cinematch.util.JsonStorageMock::addOrUpdate
        );

        // WHEN : on marque un film.
        service.mark("Inception", "liked");

        // THEN : le sink a re√ßu les valeurs.
        assertEquals("Inception", app.cinematch.util.JsonStorageMock.lastTitle);
        assertEquals("liked", app.cinematch.util.JsonStorageMock.lastStatus);
    }

    @Test
    void givenAllNullOrBlankValues_whenFirstNonBlank_thenReturnsEmptyString() throws Exception {
        // GIVEN : tous les param√®tres sont nuls ou vides.
        final MovieRecommenderService service = newService();
        final Method m =
                MovieRecommenderService.class.getDeclaredMethod("firstNonBlank", String[].class);
        m.setAccessible(true);

        // WHEN : on appelle la m√©thode priv√©e via r√©flexion.
        final Object result = m.invoke(service, (Object) new String[] {null, "   ", "\t"});

        // THEN : la m√©thode retourne une cha√Æne vide "".
        assertEquals("", result);
    }

    @Test
    void givenNullRaw_whenExtractFirstMeaningfulLine_thenReturnsEmptyString() throws Exception {
        // GIVEN : on veut tester la branche o√π raw == null.
        final MovieRecommenderService service = newService();
        final Method m = MovieRecommenderService.class.getDeclaredMethod(
                "extractFirstMeaningfulLine", String.class);
        m.setAccessible(true);

        // WHEN : on invoque la m√©thode avec null.
        final Object result = m.invoke(service, (Object) null);

        // THEN : la m√©thode retourne une cha√Æne vide (aucune ligne exploitable).
        assertEquals("", result);
    }


    @Test
    void givenBaseUrlAndModel_whenConstruct_thenServiceInstantiated() {
        // GIVEN : un mod√®le et une URL bidons
        String baseUrl = "http://fake";
        String model = "fake-model";

        // WHEN : on cr√©e le service avec le constructeur standard (prod)
        MovieRecommenderService service = new MovieRecommenderService(baseUrl, model);

        // THEN : l‚Äôinstance est correctement cr√©√©e
            assertNotNull(service);
    }

    @Test
    void givenBaseUrlModelAndCustomSink_whenConstruct_thenMarkUsesInjectedSink() {
        // GIVEN : un BiConsumer capturant les valeurs pass√©es √† mark()
        final String[] holder = new String[2];
        java.util.function.BiConsumer<String, String> sink = (title, status) -> {
            holder[0] = title;
            holder[1] = status;
        };

        // WHEN : on cr√©e le service avec ce sink personnalis√© et on appelle mark()
        MovieRecommenderService service =
                new MovieRecommenderService("http://fake", "fake-model", sink);
        service.mark("Matrix", "seen");

        // THEN : le sink a bien √©t√© invoqu√© avec les bons param√®tres
        assertEquals("Matrix", holder[0]);
        assertEquals("seen", holder[1]);
    }

    @Test
    void givenOllamaAndNullSink_whenConstruct_thenDefaultSinkBranchIsCovered() {
        // GIVEN : un faux OllamaClient dont la m√©thode chat() renvoie toujours une cha√Æne
        OllamaClient fakeClient = new OllamaClient("http://fake", "fake-model") {
            @Override
            public String chat(String system, String user) {
                return "Une r√©ponse simul√©e";
            }
        };

        // WHEN : on cr√©e le service avec un sink null (branche du constructeur ternaire)
        MovieRecommenderService service = new MovieRecommenderService(fakeClient, null);

        // THEN : la m√©thode generateDescription() fonctionne avec le client fake
        String desc = service.generateDescription("Avatar");
        assertEquals("Une r√©ponse simul√©e", desc);
    }
}
